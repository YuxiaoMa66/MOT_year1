"0","# Recursive function to build the decision tree and prune it. Store the leaf nodes in a list and return it."
"0","Build_tree_prune <- function(data, IV, DV, depth, min_obs) {"
"0","  # 初始化一个列表来收集叶子节点的信息"
"0","  leaves <- list()"
"0","  "
"0","  recursive_build <- function(data, IV, DV, depth, min_obs, path = list()) {"
"0","    # 检查当前节点的数据量是否小于min_obs或者是否达到最大深度"
"0","    if (nrow(data) < min_obs || depth == 0 || length(IV) == 0) {"
"0","      # 计算当前节点的DV均值，如果全部为0或1，则直接使用该值"
"0","      leaf_avg <- if (all(data[[DV]] == 0, na.rm = TRUE)) {"
"0","        0"
"0","      } else if (all(data[[DV]] == 1, na.rm = TRUE)) {"
"0","        1"
"0","      } else {"
"0","        mean(data[[DV]], na.rm = TRUE)"
"0","      }"
"0","      # 保存当前节点作为叶子节点"
"0","      return(list(data = data, path = path, leaf_avg = leaf_avg))"
"0","    }"
"0","    "
"0","    selected_var <- if (length(IV) > 1) select_var(data, IV, DV) else IV[1]"
"0","    "
"0","    if (!selected_var %in% names(data)) {"
"0","      return(list(data = data, path = path, leaf_avg = NA))  # 如果选中的变量不在数据中，返回NA作为均值"
"0","    }"
"0","    "
"0","    # 根据选中的变量分割数据"
"0","    left_data <- data[data[[selected_var]] == 0, ]"
"0","    right_data <- data[data[[selected_var]] == 1, ]"
"0","    "
"0","    # 更新路径信息"
"0","    new_path_left <- c(path, paste(selected_var, ""= 0""))"
"0","    new_path_right <- c(path, paste(selected_var, ""= 1""))"
"0","    "
"0","    # 如果当前节点的数据量小于min_obs，则不继续分裂，直接将当前节点视为叶子节点"
"0","    if (nrow(data) < min_obs) {"
"0","      leaf_avg <- mean(data[[DV]], na.rm = TRUE)"
"0","      return(list(data = data, path = path, leaf_avg = leaf_avg))"
"0","    } else {"
"0","      # 递归构建左右子节点"
"0","      left_leaves <- recursive_build(left_data, IV[!IV %in% selected_var], DV, depth - 1, min_obs, new_path_left)"
"0","      right_leaves <- recursive_build(right_data, IV[!IV %in% selected_var], DV, depth - 1, min_obs, new_path_right)"
"0","      return(c(left_leaves, right_leaves))"
"0","    }"
"0","  }"
"0","  "
"0","  # 从根节点开始构建决策树"
"0","  leaves <- recursive_build(data, IV, DV, depth, min_obs)"
"0","  "
"0","  # 返回收集到的所有叶子节点信息"
"0","  return(leaves)"
"0","}"
"0",""
"0",""
