"0","# Perform PCA on the training data using IV3 variables"
"0","pca_train_data_new <- prcomp(train_data_new[IV3], scale. = TRUE)"
"0",""
"0","# Determine the number of components that explain at least 90% of the variance"
"0","var_explained <- cumsum(pca_train_data_new$sdev^2) / sum(pca_train_data_new$sdev^2)"
"0","num_components <- which(var_explained >= 0.9)[1]"
"0",""
"0","# Transform the training data using the selected number of components"
"0","train_data_PCA <- pca_train_data_new$x[, 1:num_components]"
"0","# Normalize the PCA components to the range [0, 1]"
"0","train_data_PCA_normalized <- apply(train_data_PCA, 2, function(x) (x - min(x)) / (max(x) - min(x)))"
"0","train_data_new2 <- cbind(data.frame(train_data_PCA_normalized), train_data_new[, setdiff(names(train_data_new), IV3)])"
"0",""
"0","# Apply the same PCA transformation to the testing data"
"0","test_data_PCA <- predict(pca_train_data_new, newdata = test_data_new[IV3])[, 1:num_components]"
"0","# Normalize the PCA components to the range [0, 1]"
"0","test_data_PCA_normalized <- apply(test_data_PCA, 2, function(x) (x - min(x)) / (max(x) - min(x)))"
"0","test_data_new2 <- cbind(data.frame(test_data_PCA_normalized), test_data_new[, setdiff(names(test_data_new), IV3)])"
"0",""
"0","# Clear intermediate variables to clean up the environment"
"0","rm(train_data_PCA, test_data_PCA, pca_train_data_new, var_explained, num_components, train_data_PCA_normalized, test_data_PCA_normalized)"
"0",""
"0",""
