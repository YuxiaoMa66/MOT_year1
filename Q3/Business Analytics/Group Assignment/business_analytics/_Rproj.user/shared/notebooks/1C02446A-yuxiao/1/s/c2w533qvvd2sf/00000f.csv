"0","# Recursive function to build the decision tree and prune it. Store the leaf nodes in a list and return it."
"0","Build_tree_prune <- function(data, IV, DV, depth, min_obs) {"
"0","  # 初始化一个空列表来保存叶子节点"
"0","  leaves <- list()"
"0",""
"0","  # 递归构建决策树并进行剪枝"
"0","  recursive_build <- function(data, IV, DV, depth, min_obs, path = list()) {"
"0","    # 检查是否满足叶子节点的条件"
"0","    if (nrow(data) < min_obs || depth == 0 || length(IV) == 0) {"
"0","      # 计算DV的平均值，处理NaN情况"
"0","      leaf_avg <- mean(data[[DV]], na.rm = TRUE)"
"0","      if (is.nan(leaf_avg)) {"
"0","        leaf_avg <- ifelse(all(data[[DV]] == 0), 0, 1)"
"0","      }"
"0","      data$Leaf_avg <- leaf_avg"
"0","      # 保存叶子节点的数据和路径"
"0","      leaves <<- c(leaves, list(list(data = data, path = path)))"
"0","      return()"
"0","    }"
"0","    "
"0","    # 选择用于分割的变量"
"0","    selected_var <- if (length(IV) > 1) select_var(data, IV, DV) else IV[1]"
"0","    if (!selected_var %in% names(data)) {"
"0","      return()"
"0","    }"
"0","    "
"0","    # 分割数据集"
"0","    left_data <- data[data[[selected_var]] == 0, ]"
"0","    right_data <- data[data[[selected_var]] == 1, ]"
"0","    "
"0","    # 更新路径并递归处理左右子树"
"0","    new_path_left <- c(path, paste(selected_var, ""= 0""))"
"0","    new_path_right <- c(path, paste(selected_var, ""= 1""))"
"0","    recursive_build(left_data, IV[!IV %in% selected_var], DV, depth - 1, min_obs, new_path_left)"
"0","    recursive_build(right_data, IV[!IV %in% selected_var], DV, depth - 1, min_obs, new_path_right)"
"0","  }"
"0","  "
"0","  # 开始从根节点递归构建决策树"
"0","  recursive_build(data, IV, DV, depth, min_obs)"
"0",""
"0","  # 返回保存有叶子节点数据和路径的列表"
"0","  return(leaves)"
"0","}"
"0",""
"0",""
"0",""
