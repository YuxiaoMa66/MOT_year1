"0","# Recursive function to build the decision tree and prune it. Store the leaf nodes in a list and return it."
"0","Build_tree_prune <- function(data, IV, DV, depth, min_obs) {"
"0","  # 初始化用于存储叶子节点的列表"
"0","  leaves <- list()"
"0","  "
"0","  recursive_build <- function(data, IV, DV, depth, min_obs, path = list()) {"
"0","    # 检查当前数据量是否小于最小观察阈值，或者已达到最大深度，或没有更多的变量可用"
"0","    if (nrow(data) < min_obs || depth == 0 || length(IV) == 0) {"
"0","      leaf_avg <- mean(data[[DV]], na.rm = TRUE) # 计算DV的平均值"
"0","      data$Leaf_avg <- leaf_avg # 添加Leaf_avg到数据中"
"0","      return(list(data = data, path = path)) # 返回叶节点的数据和路径"
"0","    }"
"0","    "
"0","    # 选择最佳分割变量，确保selected_var不是空的"
"0","    if (length(IV) > 1) {"
"0","      selected_var <- select_var(data, IV, DV)"
"0","    } else {"
"0","      return(list(data = data, path = path))"
"0","    }"
"0","    "
"0","    # 确保selected_var是数据集中的一个有效列"
"0","    if (!selected_var %in% names(data)) {"
"0","      return(list(data = data, path = path))"
"0","    }"
"0","    "
"0","    # 分割数据"
"0","    left_data <- data[data[[selected_var]] == 0, ]"
"0","    right_data <- data[data[[selected_var]] == 1, ]"
"0","    "
"0","    # 更新路径，递归构建左右子树"
"0","    new_path_left <- c(path, paste(selected_var, ""= 0""))"
"0","    new_path_right <- c(path, paste(selected_var, ""= 1""))"
"0","    left_leaves <- recursive_build(left_data, IV[!IV %in% selected_var], DV, depth - 1, min_obs, new_path_left)"
"0","    right_leaves <- recursive_build(right_data, IV[!IV %in% selected_var], DV, depth - 1, min_obs, new_path_right)"
"0","    "
"0","    # 合并左右子树的叶子节点"
"0","    return(c(left_leaves, right_leaves))"
"0","  }"
"0","  "
"0","  # 开始递归构建决策树并剪枝"
"0","  leaves <- recursive_build(data, IV, DV, depth, min_obs)"
"0","  "
"0","  # 返回包含所有叶子节点的列表"
"0","  return(leaves)"
"0","}"
"0",""
"0",""
