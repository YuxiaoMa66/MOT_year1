"0","# Recursive function to build the decision tree and prune it. Store the leaf nodes in a list and return it."
"0","Build_tree_prune <- function(data, IV, DV, depth, min_obs) {"
"0","  # 初始化一个空列表来保存所有叶子节点的数据"
"0","  leaves <- list()"
"0","  "
"0","  recursive_build <- function(data, IV, DV, depth, min_obs, path = list()) {"
"0","    # 基准情况：如果数据量小于min_obs、深度为0、或者没有更多变量可分，则当前节点视为叶子节点"
"0","    if (nrow(data) < min_obs || depth == 0 || length(IV) == 0) {"
"0","      leaf_avg <- mean(data[[DV]], na.rm = TRUE)"
"0","      # 如果DV列完全由0或1组成，则直接使用存在的值作为均值"
"0","      leaf_avg <- ifelse(is.nan(leaf_avg), ifelse(all(data[[DV]] == 0), 0, 1), leaf_avg)"
"0","      return(list(leaf = TRUE, data = data, path = path, leaf_avg = leaf_avg))"
"0","    }"
"0","    "
"0","    selected_var <- if (length(IV) > 1) select_var(data, IV, DV) else IV[1]"
"0","    "
"0","    # 如果选定的变量不在数据集的列名中，则停止递归"
"0","    if (!selected_var %in% names(data)) {"
"0","      return(NULL)"
"0","    }"
"0","    "
"0","    left_data <- data[data[[selected_var]] == 0, ]"
"0","    right_data <- data[data[[selected_var]] == 1, ]"
"0","    "
"0","    # 更新路径"
"0","    new_path_left <- c(path, paste(selected_var, ""= 0""))"
"0","    new_path_right <- c(path, paste(selected_var, ""= 1""))"
"0","    "
"0","    # 递归构建左右子树"
"0","    left_leaf <- if (nrow(left_data) >= min_obs) recursive_build(left_data, IV[!IV %in% selected_var], DV, depth - 1, min_obs, new_path_left) else NULL"
"0","    right_leaf <- if (nrow(right_data) >= min_obs) recursive_build(right_data, IV[!IV %in% selected_var], DV, depth - 1, min_obs, new_path_right) else NULL"
"0","    "
"0","    # 只保留有效的叶子节点"
"0","    return(c(left_leaf, right_leaf))"
"0","  }"
"0","  "
"0","  leaves <- recursive_build(data, IV, DV, depth, min_obs)"
"0","  "
"0","  # 过滤掉NULL元素"
"0","  leaves <- Filter(Negate(is.null), leaves)"
"0","  "
"0","  return(leaves)"
"0","}"
"0",""
"0",""
