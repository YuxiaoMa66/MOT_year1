"0","# Recursive function to build the decision tree and prune it. Store the leaf nodes in a list and return it."
"0","Build_tree_prune <- function(data, IV, DV, depth, min_obs) {"
"0","  # 用于存储叶子节点数据的列表"
"0","  leaves <- list()"
"0",""
"0","  recursive_build <- function(data, IV, DV, depth, min_obs, leaves, path = list()) {"
"0","    if (nrow(data) < min_obs || depth == 0 || length(IV) == 0) {"
"0","      # 当前节点为叶子节点"
"0","      leaf_avg <- mean(data[[DV]], na.rm = TRUE)"
"0","      # 将叶子节点的平均值添加到数据中"
"0","      data$Leaf_avg <- leaf_avg"
"0","      # 将路径和叶子节点数据添加到叶子列表中"
"0","      leaves <<- append(leaves, list(list(data = data, path = path, Leaf_avg = leaf_avg)))"
"0","      return()"
"0","    }"
"0","    "
"0","    # 选择用于分割的变量"
"0","    selected_var <- select_var(data, IV, DV)"
"0","    if (!selected_var %in% names(data)) {"
"0","      return()  # 如果选中的变量不在数据框中，直接返回"
"0","    }"
"0",""
"0","    # 分割数据集"
"0","    left_data <- data[data[[selected_var]] == 0, , drop = FALSE]"
"0","    right_data <- data[data[[selected_var]] == 1, , drop = FALSE]"
"0","    "
"0","    # 从变量集中移除已选变量"
"0","    remaining_IV <- IV[IV != selected_var]"
"0",""
"0","    # 递归构建左右子树"
"0","    if (nrow(left_data) > 0) {"
"0","      recursive_build(left_data, remaining_IV, DV, depth - 1, min_obs, leaves, c(path, paste(selected_var, ""= 0"")))"
"0","    }"
"0","    if (nrow(right_data) > 0) {"
"0","      recursive_build(right_data, remaining_IV, DV, depth - 1, min_obs, leaves, c(path, paste(selected_var, ""= 1"")))"
"0","    }"
"0","  }"
"0","  "
"0","  # 开始递归构建过程"
"0","  recursive_build(data, IV, DV, depth, min_obs, leaves)"
"0",""
"0","  # 返回包含所有叶子节点数据的列表"
"0","  return(leaves)"
"0","}"
"0",""
"0",""
