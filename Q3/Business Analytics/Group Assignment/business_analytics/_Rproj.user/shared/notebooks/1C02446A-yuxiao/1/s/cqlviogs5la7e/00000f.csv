"0","# Implement the function"
"0","Build_tree_prune <- function(data, IV, DV, depth, min_obs) {"
"0","  variables <- IV"
"0",""
"0","  if (depth == 0) return()"
"0","  "
"0","  # select the variable if there are more than 1 variable left"
"0","  if (length(variables) > 1)"
"0","    selected_var <- select_var(data, variables, DV)"
"0","  else"
"0","    selected_var <- variables[1]"
"0","  "
"0","  # split the data"
"0","  left_data <- data[data[[selected_var]] == 0,]"
"0","  right_data <- data[data[[selected_var]] == 1,]"
"0","  "
"0","  # drop the selected variable from the list of variables"
"0","  variables <- variables[!variables %in% selected_var]"
"0","  "
"0","  # repeat the process for the left and right nodes"
"0","  Build_tree_prune(left_data, variables, DV, depth - 1, min_obs)"
"0","  Build_tree_prune(right_data, variables, DV, depth - 1, min_obs)"
"0","  "
"0","  # if the number of observations in the left node is less than the minimum number of observations in a leaf node"
"0","  if (nrow(left_data) < min_obs) {"
"0","    print(paste(""Left Node:"", mean(left_data[[DV]])))"
"0","  }"
"0","  "
"0","  # if the number of observations in the right node is less than the minimum number of observations in a leaf node"
"0","  if (nrow(right_data) < min_obs) {"
"0","    print(paste(""Right Node:"", mean(right_data[[DV]])))"
"0","  }"
"0",""
"0","}"
