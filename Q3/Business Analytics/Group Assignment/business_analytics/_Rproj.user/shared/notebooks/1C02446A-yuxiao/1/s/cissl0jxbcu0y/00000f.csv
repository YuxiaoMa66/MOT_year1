"0","# Recursive function to build the decision tree and prune it. Store the leaf nodes in a list and return it."
"0","Build_tree_prune <- function(data, IV, DV, depth, min_obs) {"
"0","  leaves <- list()"
"0","  "
"0","  recursive_build <- function(data, IV, DV, depth, min_obs, path = list()) {"
"0","    # 检查当前节点是否应该是一个叶子节点，基于min_obs的两倍"
"0","    if (nrow(data) < (min_obs * 2) || depth == 0 || length(IV) == 0) {"
"0","      leaf_avg <- ifelse(all(data[[DV]] == 0, na.rm = TRUE), 0,"
"0","                         ifelse(all(data[[DV]] == 1, na.rm = TRUE), 1,"
"0","                                mean(data[[DV]], na.rm = TRUE)))"
"0","      "
"0","      data$Leaf_avg <- leaf_avg "
"0","      return(list(data = data, path = path, leaf_avg = leaf_avg)) "
"0","    }"
"0","    "
"0","    if (length(IV) > 1) {"
"0","      selected_var <- select_var(data, IV, DV)"
"0","    } else {"
"0","      selected_var <- IV[1]"
"0","    }"
"0","    "
"0","    if (!selected_var %in% names(data)) {"
"0","      return(list(data = data, path = path))"
"0","    }"
"0","    "
"0","    # 分割数据"
"0","    left_data <- data[data[[selected_var]] == 0, ]"
"0","    right_data <- data[data[[selected_var]] == 1, ]"
"0","    "
"0","    # 构建新路径"
"0","    new_path_left <- c(path, paste(selected_var, ""= 0""))"
"0","    new_path_right <- c(path, paste(selected_var, ""= 1""))"
"0","    "
"0","    # 递归构建左右子树"
"0","    left_leaves <- if (nrow(left_data) > 0) recursive_build(left_data, IV[!IV %in% selected_var], DV, depth - 1, min_obs, new_path_left) else NULL"
"0","    right_leaves <- if (nrow(right_data) > 0) recursive_build(right_data, IV[!IV %in% selected_var], DV, depth - 1, min_obs, new_path_right) else NULL"
"0","    "
"0","    # 返回左右子树的叶子节点"
"0","    return(c(left_leaves, right_leaves))"
"0","  }"
"0","  "
"0","  leaves <- recursive_build(data, IV, DV, depth, min_obs)"
"0","  "
"0","  return(leaves)"
"0","}"
"0",""
"0",""
